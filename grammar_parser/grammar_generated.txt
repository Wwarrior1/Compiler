program -> segments
segments -> segments segment
segments ->
segment -> declaration
segment -> function_definition
segment -> instruction
declaration -> TYPE inits ';'
declaration -> error ';'
inits -> inits ',' init
inits -> init
init -> ID '=' expression
instructions -> instructions instruction
instructions -> instruction
instruction -> print_instruction
instruction -> labeled_instruction
instruction -> assignment
instruction -> choice_instruction
instruction -> while_instruction
instruction -> repeat_instruction
instruction -> return_instruction
instruction -> break_instruction
instruction -> continue_instruction
instruction -> compound_instructions
instruction -> expression ';'
print_instruction -> PRINT expr_list ';'
print_instruction -> PRINT error ';'
labeled_instruction -> ID ':' instruction
assignment -> ID '=' expression ';'
choice_instruction -> IF '(' condition ')' instruction %prec IFX
choice_instruction -> IF '(' condition ')' instruction ELSE instruction
choice_instruction -> IF '(' error ')' instruction %prec IFX
choice_instruction -> IF '(' error ')' instruction ELSE instruction
while_instruction -> WHILE '(' condition ')' instruction
while_instruction -> WHILE '(' error ')' instruction
repeat_instruction -> REPEAT instructions UNTIL condition ';'
return_instruction -> RETURN expression ';'
break_instruction -> BREAK ';'
continue_instruction -> CONTINUE ';'
compound_instructions -> '{' compound_segments '}'
compound_segments -> compound_segments compound_segment
compound_segments ->
compound_segment -> declaration
compound_segment -> instruction
condition -> expression
const -> integer
const -> float
const -> string
integer -> INTEGER
float -> FLOAT
string -> STRING
identifier_expression -> ID
function_call_expression -> ID '(' expr_list_or_empty ')'
function_call_expression -> ID '(' error ')'
expression -> binary_expression
expression -> '(' expression ')'
expression -> '(' error ')'
expression -> identifier_expression
expression -> function_call_expression
expression -> const
binary_expression -> expression '+' expression
binary_expression -> expression '-' expression
binary_expression -> expression '*' expression
binary_expression -> expression '/' expression
binary_expression -> expression '%' expression
binary_expression -> expression '|' expression
binary_expression -> expression '&' expression
binary_expression -> expression '^' expression
binary_expression -> expression AND expression
binary_expression -> expression OR expression
binary_expression -> expression SHL expression
binary_expression -> expression SHR expression
binary_expression -> expression EQ expression
binary_expression -> expression NEQ expression
binary_expression -> expression '>' expression
binary_expression -> expression '<' expression
binary_expression -> expression LE expression
binary_expression -> expression GE expression
function_definition -> TYPE ID '(' args_list_or_empty ')' compound_instructions
args_list -> args_list ',' arg
args_list -> arg
arg -> TYPE ID
expr_list_or_empty -> expr_list
expr_list_or_empty ->
expr_list -> expr_list ',' expression
expr_list -> expression
args_list_or_empty -> args_list
args_list_or_empty ->
